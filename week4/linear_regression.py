# -*- coding: utf-8 -*-
"""Linear_Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RzLhXxamhWW2CB7VvjDC3NN88Fwsbcrg

# 1 - Load the dataset
"""

#sklearn comes with few small datasets. We will use one of them called "California Housing". Which is identical to
#to the example we saw in theory part. This dataset has 20640 samples with 8 features (columns). Here target variable
#is the price of the house.

#import the libs
from sklearn.datasets import fetch_california_housing
#load the dataset
data = fetch_california_housing()  #returns dictionary-like object, attributes are - data, target, DESCR
#first of all, let's see the shape of the training data
print(data.data.shape)

#shape of a target/labels
print(data.target.shape)

#important info about the dataset
print(data.DESCR)

#how target values look like
data.target[:40]

"""# 2 - Preprocess the dataset

Since this dataset is already preprocessed, we dont have to do anything in this phase.

# 3 - Train a model
"""

from sklearn.linear_model import LinearRegression
#create a linear regression object
lin_reg = LinearRegression()
#train a model
lin_reg.fit(data.data, data.target)

#learned weights
lin_reg.coef_

#learned intercept
lin_reg.intercept_

"""# 4 - Test a model"""

# we can use a model to predict as follows
lin_reg.predict(data.data[5].reshape(1,-1))  #first sample

#let's see what was the true value
data.target[5]  # Pretty close :)

#find mean squared error
from sklearn.metrics import mean_squared_error
mean_squared_error(data.target, lin_reg.predict(data.data))

#let us calculate mse from scratch to make sure its correct
import numpy as np
np.mean((lin_reg.predict(data.data) - data.target) ** 2)

"""# 5 - Deploy a model

We can use **predict** method to predict the price of a house.

As you can see, the main benifit of these libraries are we do not have to worry about internal algorithms. It does this work for us.
"""